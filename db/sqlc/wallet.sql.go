// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallet.sql

package db

import (
	"context"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
  private_key, public_key
) VALUES (
  $1, $2
)
RETURNING id, public_key, private_key, created_at
`

type CreateWalletParams struct {
	PrivateKey string `db:"private_key" json:"private_key"`
	PublicKey  string `db:"public_key" json:"public_key"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet, arg.PrivateKey, arg.PublicKey)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.CreatedAt,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, public_key, private_key, created_at FROM wallets 
WHERE public_key = $1
LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, publicKey string) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, publicKey)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.CreatedAt,
	)
	return i, err
}
