// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: peerbill_user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeerbillUser_GetRates_FullMethodName     = "/pb.PeerbillUser/GetRates"
	PeerbillUser_GetDataPlans_FullMethodName = "/pb.PeerbillUser/GetDataPlans"
	PeerbillUser_BuyAirtime_FullMethodName   = "/pb.PeerbillUser/BuyAirtime"
	PeerbillUser_GenWallet_FullMethodName    = "/pb.PeerbillUser/GenWallet"
	PeerbillUser_MadePayment_FullMethodName  = "/pb.PeerbillUser/MadePayment"
	PeerbillUser_UpdateOrder_FullMethodName  = "/pb.PeerbillUser/UpdateOrder"
)

// PeerbillUserClient is the client API for PeerbillUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerbillUserClient interface {
	GetRates(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error)
	GetDataPlans(ctx context.Context, in *DataLookupRequest, opts ...grpc.CallOption) (*DataLookupResponse, error)
	BuyAirtime(ctx context.Context, in *AirtimeRequest, opts ...grpc.CallOption) (*AirtimeResponse, error)
	GenWallet(ctx context.Context, in *GenWalletRequest, opts ...grpc.CallOption) (*GenWalletResponse, error)
	MadePayment(ctx context.Context, in *MadePaymentRequest, opts ...grpc.CallOption) (*MadePaymentResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
}

type peerbillUserClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerbillUserClient(cc grpc.ClientConnInterface) PeerbillUserClient {
	return &peerbillUserClient{cc}
}

func (c *peerbillUserClient) GetRates(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, PeerbillUser_GetRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillUserClient) GetDataPlans(ctx context.Context, in *DataLookupRequest, opts ...grpc.CallOption) (*DataLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataLookupResponse)
	err := c.cc.Invoke(ctx, PeerbillUser_GetDataPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillUserClient) BuyAirtime(ctx context.Context, in *AirtimeRequest, opts ...grpc.CallOption) (*AirtimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirtimeResponse)
	err := c.cc.Invoke(ctx, PeerbillUser_BuyAirtime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillUserClient) GenWallet(ctx context.Context, in *GenWalletRequest, opts ...grpc.CallOption) (*GenWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenWalletResponse)
	err := c.cc.Invoke(ctx, PeerbillUser_GenWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillUserClient) MadePayment(ctx context.Context, in *MadePaymentRequest, opts ...grpc.CallOption) (*MadePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MadePaymentResponse)
	err := c.cc.Invoke(ctx, PeerbillUser_MadePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillUserClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, PeerbillUser_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerbillUserServer is the server API for PeerbillUser service.
// All implementations must embed UnimplementedPeerbillUserServer
// for forward compatibility.
type PeerbillUserServer interface {
	GetRates(context.Context, *RateRequest) (*RateResponse, error)
	GetDataPlans(context.Context, *DataLookupRequest) (*DataLookupResponse, error)
	BuyAirtime(context.Context, *AirtimeRequest) (*AirtimeResponse, error)
	GenWallet(context.Context, *GenWalletRequest) (*GenWalletResponse, error)
	MadePayment(context.Context, *MadePaymentRequest) (*MadePaymentResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	mustEmbedUnimplementedPeerbillUserServer()
}

// UnimplementedPeerbillUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeerbillUserServer struct{}

func (UnimplementedPeerbillUserServer) GetRates(context.Context, *RateRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedPeerbillUserServer) GetDataPlans(context.Context, *DataLookupRequest) (*DataLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataPlans not implemented")
}
func (UnimplementedPeerbillUserServer) BuyAirtime(context.Context, *AirtimeRequest) (*AirtimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyAirtime not implemented")
}
func (UnimplementedPeerbillUserServer) GenWallet(context.Context, *GenWalletRequest) (*GenWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenWallet not implemented")
}
func (UnimplementedPeerbillUserServer) MadePayment(context.Context, *MadePaymentRequest) (*MadePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MadePayment not implemented")
}
func (UnimplementedPeerbillUserServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedPeerbillUserServer) mustEmbedUnimplementedPeerbillUserServer() {}
func (UnimplementedPeerbillUserServer) testEmbeddedByValue()                      {}

// UnsafePeerbillUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerbillUserServer will
// result in compilation errors.
type UnsafePeerbillUserServer interface {
	mustEmbedUnimplementedPeerbillUserServer()
}

func RegisterPeerbillUserServer(s grpc.ServiceRegistrar, srv PeerbillUserServer) {
	// If the following call pancis, it indicates UnimplementedPeerbillUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeerbillUser_ServiceDesc, srv)
}

func _PeerbillUser_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillUserServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillUser_GetRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillUserServer).GetRates(ctx, req.(*RateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillUser_GetDataPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillUserServer).GetDataPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillUser_GetDataPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillUserServer).GetDataPlans(ctx, req.(*DataLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillUser_BuyAirtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillUserServer).BuyAirtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillUser_BuyAirtime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillUserServer).BuyAirtime(ctx, req.(*AirtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillUser_GenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillUserServer).GenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillUser_GenWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillUserServer).GenWallet(ctx, req.(*GenWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillUser_MadePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MadePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillUserServer).MadePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillUser_MadePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillUserServer).MadePayment(ctx, req.(*MadePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillUser_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillUserServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillUser_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillUserServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerbillUser_ServiceDesc is the grpc.ServiceDesc for PeerbillUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerbillUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PeerbillUser",
	HandlerType: (*PeerbillUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _PeerbillUser_GetRates_Handler,
		},
		{
			MethodName: "GetDataPlans",
			Handler:    _PeerbillUser_GetDataPlans_Handler,
		},
		{
			MethodName: "BuyAirtime",
			Handler:    _PeerbillUser_BuyAirtime_Handler,
		},
		{
			MethodName: "GenWallet",
			Handler:    _PeerbillUser_GenWallet_Handler,
		},
		{
			MethodName: "MadePayment",
			Handler:    _PeerbillUser_MadePayment_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _PeerbillUser_UpdateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peerbill_user.proto",
}
